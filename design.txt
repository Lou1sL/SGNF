//打印连接数量，CPU负载，内存占用，硬盘I/O
is.getSSStatus();

//SS---------------------------
ScenarioServer ss = new ScenarioServer();
ss.setTick(60);
ss.setCode(ssinfo[0].Code);

ss.setFrameUpdater(new ChannelInboundHandlerAdapter(){});
ss.setMaxConn(1024);
ss.setPort(ssinfo[0].Port);
ss.start();

ss.shut();


//Clt
Client.Room.GetAll();
Client.Room.Create();
Client.Room.Join(1000);
Client.Room.Prepared();

Client.Room.Exit();


//----------------------------------------------------------------------





class Room
{
	private List<int> Player;
	
	public void PlayerIn(int PID)
	{
		if(!Player.contains(PID))Player.add(PID);
	}
	public void PlayerOut(int PID)
	{
		if(Player.contains(PID))Player.remove(PID);
	}
	public bool isEmpty()
	{
		return Player.isEmpty();
	}
	public int BossPlayer()
	{
		if(!isEmpty())return Player[0];
		else return -1;
	}
}

class RoomContainer
{
	private List<Room> AllRoom;
	
	public Room GetRoom(int BossPlayer)
	{
		foreach(Room room in AllRoom)
		{
			if(room.ID == ID)return room;
		}
		return null;
	}
	public int CreateRoom(int BossPlayerID)
	{
		Room nr = new Room();
		nr.BossPlayer = BossPlayerID;
		AllRoom.Add(nr);
	}
	public void DropRoom(int RoomID)
	{
		AllRoom.RemoveAt(RoomID);
	}
	
}







IS:
Arr<Room> ActiveRoom

Net Bool Login()
Net Room()



InformSS PlayerJoin(PlayerID,RoomID)



SS:
Arr PlayerOnServer


InformIS RoundEnd(RoomID)



Clt:

Bool Login()

Bool JoinRoom(RoomID)
Int CreateRoomOnBestSS()
Int JoinRandomRoomOnBestSS()
