



//使用方法----------------------------------------------------------------------

//IS---------------------------
InfoServer is = new InfoServer();

SSInfo ssinfo[] = 
{
	new SSInfo("ss0","localhost",9876,"biubiubiu");
};
is.setSSInfo(ssinfo);

is.setCallHandler(new ISCallHandler(){
	@Override
	public Object dealMsg(Object msg)
	{
		ISModel message = (ISModel)msg;
		ISModel response = new ISModel();
		
		if(message.Command == Command.LOGIN)
		{
			if(message.Name.equals("emmm") && message.Password.equals("biabiabia"))response.Command = Command.LOGINSUCCEED;
			else response.Command = Command.LOGINFAILED;
		}else return null;
		
	}
});

is.setMaxConn(1024);
is.setPort(9999);
is.start();

//打印连接数量，CPU负载，内存占用，硬盘I/O
is.getSSStatus();

is.shut();

//SS---------------------------
ScenarioServer ss = new ScenarioServer();
ss.setTick(60);
ss.setCode(ssinfo[0].Code);

ss.setFrameUpdater(new ChannelInboundHandlerAdapter(){});
ss.setMaxConn(1024);
ss.setPort(ssinfo[0].Port);
ss.start();

ss.shut();


//Clt
Client.Room.GetList();
Client.Room.Create();
Client.Room.Join(1000);
Client.Room.Prepared();

Client.Room.Exit();


//----------------------------------------------------------------------

流程：


Clt发送登录凭据到IS，由用户判断正确性并调用CountAsLoggedIn(int PlayerID,Socket PlayerSocket)保持连接



用户定义的Clt部分：
房间的战局信息数据包格式
用户定义的IS部分：
账号密码登陆验证判断逻辑
房间的战局信息数据包格式
用户定义的SS部分：
玩家场景同步的数据包格式及逻辑




对于该框架，玩家只有一个全局唯一值来表示：PlayerID
至于玩家的具体信息啥的是用框架的人的事情
那框架内没有账号密码验证过程怎么处理呢？
在IS中，有个CountAsLoggedIn(int PlayerID,Socket PlayerSocket)函数
调用了就算做该玩家已登录咯~








class Room
{
	private List<int> Player;
	
	public void PlayerIn(int PID)
	{
		if(!Player.contains(PID))Player.add(PID);
	}
	public void PlayerOut(int PID)
	{
		if(Player.contains(PID))Player.remove(PID);
	}
	public bool isEmpty()
	{
		return Player.isEmpty();
	}
	public int BossPlayer()
	{
		if(!isEmpty())return Player[0];
		else return -1;
	}
}

class RoomContainer
{
	private List<Room> AllRoom;
	
	public Room GetRoom(int BossPlayer)
	{
		foreach(Room room in AllRoom)
		{
			if(room.ID == ID)return room;
		}
		return null;
	}
	public int CreateRoom(int BossPlayerID)
	{
		Room nr = new Room();
		nr.BossPlayer = BossPlayerID;
		AllRoom.Add(nr);
	}
	public void DropRoom(int RoomID)
	{
		AllRoom.RemoveAt(RoomID);
	}
	
}







IS:
Arr<ServerSetting> AllSS
Arr<Int> OnlinePlayer
Arr<Room> ActiveRoom

Net Bool Login()
Net Room()



InformSS PlayerJoin(PlayerID,RoomID)



SS:
Arr PlayerOnServer


InformIS RoundEnd(RoomID)



Clt:

Bool Login()

Bool JoinRoom(RoomID)
Int CreateRoomOnBestSS()
Int JoinRandomRoomOnBestSS()
